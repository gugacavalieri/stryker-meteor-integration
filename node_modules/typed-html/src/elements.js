"use strict";
/// <reference path="./jsx/element-types.d.ts" />
/// <reference path="./jsx/events.d.ts" />
/// <reference path="./jsx/intrinsic-elements.d.ts" />
Object.defineProperty(exports, "__esModule", { value: true });
var os = require("os");
var capitalACharCode = 'A'.charCodeAt(0);
var capitalZCharCode = 'Z'.charCodeAt(0);
var isUpper = function (input, index) {
    var charCode = input.charCodeAt(index);
    return capitalACharCode <= charCode && capitalZCharCode >= charCode;
};
var toKebabCase = function (camelCased) {
    var kebabCased = '';
    for (var i = 0; i < camelCased.length; i++) {
        var prevUpperCased = i > 0 ? isUpper(camelCased, i - 1) : true;
        var currentUpperCased = isUpper(camelCased, i);
        var nextUpperCased = i < camelCased.length - 1 ? isUpper(camelCased, i + 1) : true;
        if (!prevUpperCased && currentUpperCased || currentUpperCased && !nextUpperCased) {
            kebabCased += '-';
            kebabCased += camelCased[i].toLowerCase();
        }
        else {
            kebabCased += camelCased[i];
        }
    }
    return kebabCased;
};
var escapeAttrNodeValue = function (value) {
    return value.replace(/(&)|(")|(\u00A0)/g, function (_, amp, quote) {
        if (amp)
            return '&amp;';
        if (quote)
            return '&quot;';
        return '&nbsp;';
    });
};
var attributeToString = function (attributes) { return function (name) {
    var value = attributes[name];
    var formattedName = toKebabCase(name);
    var makeAttribute = function (value) { return formattedName + "=\"" + value + "\""; };
    if (value instanceof Date) {
        return makeAttribute(value.toISOString());
    }
    else
        switch (typeof value) {
            case 'boolean':
                // https://www.w3.org/TR/2008/WD-html5-20080610/semantics.html#boolean
                if (value) {
                    return formattedName;
                }
                else {
                    return '';
                }
            default:
                return makeAttribute(escapeAttrNodeValue(value.toString()));
        }
}; };
var attributesToString = function (attributes) {
    if (attributes) {
        return ' ' + Object.keys(attributes)
            .map(attributeToString(attributes))
            .filter(function (attribute) { return attribute.length; }) // filter out negative boolean attributes
            .join(' ');
    }
    else {
        return '';
    }
};
var contentsToString = function (contents) {
    if (contents) {
        return contents
            .map(function (elements) { return Array.isArray(elements) ? elements.join(os.EOL) : elements; })
            .join(os.EOL);
    }
    else {
        return '';
    }
};
var isVoidElement = function (tagName) {
    return [
        'area',
        'base',
        'br',
        'col',
        'command',
        'embed',
        'hr',
        'img',
        'input',
        'keygen',
        'link',
        'meta',
        'param',
        'source',
        'track',
        'wbr'
    ].indexOf(tagName) > -1;
};
function createElement(name, attributes) {
    var contents = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        contents[_i - 2] = arguments[_i];
    }
    if (typeof name === 'function') {
        return name(attributes, contents);
    }
    else {
        var tagName = toKebabCase(name);
        if (isVoidElement(tagName) && !contents.length) {
            return "<" + tagName + attributesToString(attributes) + ">";
        }
        else {
            return "<" + tagName + attributesToString(attributes) + ">" + contentsToString(contents) + "</" + tagName + ">";
        }
    }
}
exports.createElement = createElement;
//# sourceMappingURL=elements.js.map