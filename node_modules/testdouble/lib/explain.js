"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = require("./wrap/lodash");
var calls_1 = require("./store/calls");
var store_1 = require("./store");
var arguments_1 = require("./stringify/arguments");
var stubbings_1 = require("./store/stubbings");
function explain(testDouble) {
    if (store_1.default.for(testDouble, false) == null) {
        return nullDescription();
    }
    var calls = calls_1.default.for(testDouble);
    var stubs = stubbings_1.default.for(testDouble);
    return {
        name: store_1.default.for(testDouble).name,
        callCount: calls.length,
        calls: calls,
        description: testdoubleDescription(testDouble, stubs, calls) +
            stubbingDescription(stubs) +
            callDescription(calls),
        isTestDouble: true
    };
}
exports.default = explain;
function nullDescription() {
    return ({
        name: undefined,
        callCount: 0,
        calls: [],
        description: 'This is not a test double.',
        isTestDouble: false
    });
}
function testdoubleDescription(testDouble, stubs, calls) {
    return "This test double " + stringifyName(testDouble) + "has " + stubs.length + " stubbings and " + calls.length + " invocations.";
}
function stubbingDescription(stubs) {
    return stubs.length > 0
        ? lodash_1.default.reduce(stubs, function (desc, stub) {
            return desc + ("\n  - when called with `(" + arguments_1.default(stub.args) + ")`, then " + planFor(stub) + " " + argsFor(stub) + ".");
        }, '\n\nStubbings:')
        : '';
}
function planFor(stub) {
    switch (stub.config.plan) {
        case 'thenCallback': return 'callback';
        case 'thenResolve': return 'resolve';
        case 'thenReject': return 'reject';
        default: return 'return';
    }
}
function argsFor(stub) {
    switch (stub.config.plan) {
        case 'thenCallback': return "`(" + arguments_1.default(stub.stubbedValues, ', ') + ")`";
        default: return arguments_1.default(stub.stubbedValues, ', then ', '`');
    }
}
function callDescription(calls) {
    return calls.length > 0
        ? lodash_1.default.reduce(calls, function (desc, call) { return desc + ("\n  - called with `(" + arguments_1.default(call.args) + ")`."); }, '\n\nInvocations:')
        : '';
}
function stringifyName(testDouble) {
    var name = store_1.default.for(testDouble).name;
    return name ? "`" + name + "` " : '';
}
