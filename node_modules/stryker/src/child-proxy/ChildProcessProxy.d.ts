export declare type ChildProxy<T> = {
    [K in keyof T]: (...args: any[]) => Promise<any>;
};
export default class ChildProcessProxy<T> {
    private constructorFunction;
    readonly proxy: ChildProxy<T>;
    private worker;
    private initTask;
    private workerTasks;
    private log;
    private constructor();
    /**
    * Creates a proxy where each function of the object created using the constructorFunction arg is ran inside of a child process
    */
    static create<T, P1>(requirePath: string, logLevel: string, plugins: string[], constructorFunction: {
        new (arg: P1): T;
    }, arg: P1): ChildProcessProxy<T>;
    /**
    * Creates a proxy where each function of the object created using the constructorFunction arg is ran inside of a child process
    */
    static create<T, P1, P2>(requirePath: string, logLevel: string, plugins: string[], constructorFunction: {
        new (arg: P1, arg2: P2): T;
    }, arg1: P1, arg2: P2): ChildProcessProxy<T>;
    private send;
    private initProxy;
    private proxyMethod;
    private listenToWorkerMessages;
    dispose(): void;
    private logUnidentifiedMessage;
}
