"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var report_1 = require("stryker-api/report");
var ClearTextReporter_1 = require("./reporters/ClearTextReporter");
var ProgressReporter_1 = require("./reporters/ProgressReporter");
var ProgressAppendOnlyReporter_1 = require("./reporters/ProgressAppendOnlyReporter");
var DotsReporter_1 = require("./reporters/DotsReporter");
var EventRecorderReporter_1 = require("./reporters/EventRecorderReporter");
var BroadcastReporter_1 = require("./reporters/BroadcastReporter");
var DashboardReporter_1 = require("./reporters/DashboardReporter");
var log4js_1 = require("log4js");
function registerDefaultReporters() {
    report_1.ReporterFactory.instance().register('progress-append-only', ProgressAppendOnlyReporter_1.default);
    report_1.ReporterFactory.instance().register('progress', ProgressReporter_1.default);
    report_1.ReporterFactory.instance().register('dots', DotsReporter_1.default);
    report_1.ReporterFactory.instance().register('clear-text', ClearTextReporter_1.default);
    report_1.ReporterFactory.instance().register('event-recorder', EventRecorderReporter_1.default);
    report_1.ReporterFactory.instance().register('dashboard', DashboardReporter_1.default);
}
registerDefaultReporters();
var ReporterOrchestrator = /** @class */ (function () {
    function ReporterOrchestrator(options) {
        this.options = options;
        this.log = log4js_1.getLogger(ReporterOrchestrator.name);
    }
    ReporterOrchestrator.prototype.createBroadcastReporter = function () {
        var _this = this;
        var reporters = [];
        var reporterOption = this.options.reporter;
        if (reporterOption) {
            if (Array.isArray(reporterOption)) {
                reporterOption.forEach(function (reporterName) { return reporters.push(_this.createReporter(reporterName)); });
            }
            else {
                reporters.push(this.createReporter(reporterOption));
            }
        }
        else {
            this.log.warn("No reporter configured. Please configure one or more reporters in the (for example: reporter: 'progress')");
            this.logPossibleReporters();
        }
        return new BroadcastReporter_1.default(reporters);
    };
    ReporterOrchestrator.prototype.createReporter = function (name) {
        if (name === 'progress' && !process.stdout.isTTY) {
            this.log.info('Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter');
            return { name: 'progress-append-only', reporter: report_1.ReporterFactory.instance().create('progress-append-only', this.options) };
        }
        else {
            return { name: name, reporter: report_1.ReporterFactory.instance().create(name, this.options) };
        }
    };
    ReporterOrchestrator.prototype.logPossibleReporters = function () {
        var possibleReportersCsv = '';
        report_1.ReporterFactory.instance().knownNames().forEach(function (name) {
            if (possibleReportersCsv.length) {
                possibleReportersCsv += ', ';
            }
            possibleReportersCsv += name;
        });
        this.log.warn("Possible reporters: " + possibleReportersCsv);
    };
    return ReporterOrchestrator;
}());
exports.default = ReporterOrchestrator;
//# sourceMappingURL=ReporterOrchestrator.js.map