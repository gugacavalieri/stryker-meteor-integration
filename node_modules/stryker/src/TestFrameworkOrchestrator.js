"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var test_framework_1 = require("stryker-api/test_framework");
var log4js_1 = require("log4js");
var TestFrameworkOrchestrator = /** @class */ (function () {
    function TestFrameworkOrchestrator(options) {
        this.options = options;
        this.log = log4js_1.getLogger(TestFrameworkOrchestrator.name);
    }
    TestFrameworkOrchestrator.prototype.determineTestFramework = function () {
        if (this.options.coverageAnalysis !== 'perTest') {
            this.log.debug('The `coverageAnalysis` setting is "%s", not hooking into the test framework to achieve performance benefits.', this.options.coverageAnalysis);
            return null;
        }
        else {
            return this.determineFrameworkWithCoverageAnalysis();
        }
    };
    TestFrameworkOrchestrator.prototype.determineFrameworkWithCoverageAnalysis = function () {
        var testFramework = null;
        if (this.options.testFramework) {
            if (this.testFrameworkExists(this.options.testFramework)) {
                this.log.debug("Using testFramework " + this.options.testFramework + " based on `testFramework` setting");
                testFramework = this.createTestFramework(this.options.testFramework);
            }
            else {
                this.log.warn("Could not find test framework `" + this.options.testFramework + "`. " + this.informAboutKnownTestFrameworks());
            }
        }
        else {
            this.log.warn('Missing config settings `testFramework`. Set `coverageAnalysis` option explicitly to "off" to ignore this warning.');
        }
        return testFramework;
    };
    TestFrameworkOrchestrator.prototype.informAboutKnownTestFrameworks = function () {
        return "Did you forget to load a plugin? Known test frameworks: " + JSON.stringify(test_framework_1.TestFrameworkFactory.instance().knownNames()) + ".";
    };
    TestFrameworkOrchestrator.prototype.createTestFramework = function (name) {
        return test_framework_1.TestFrameworkFactory.instance().create(name, { options: this.options });
    };
    TestFrameworkOrchestrator.prototype.testFrameworkExists = function (maybeFramework) {
        return test_framework_1.TestFrameworkFactory.instance().knownNames().indexOf(maybeFramework) > -1;
    };
    return TestFrameworkOrchestrator;
}());
exports.default = TestFrameworkOrchestrator;
//# sourceMappingURL=TestFrameworkOrchestrator.js.map