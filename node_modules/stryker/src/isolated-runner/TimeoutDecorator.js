"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var test_runner_1 = require("stryker-api/test_runner");
var objectUtils_1 = require("../utils/objectUtils");
var Task_1 = require("../utils/Task");
var TestRunnerDecorator_1 = require("./TestRunnerDecorator");
var log4js_1 = require("log4js");
var MAX_WAIT_FOR_DISPOSE = 2500;
/**
 * Wraps a test runner and implements the timeout functionality.
 */
var TimeoutDecorator = /** @class */ (function (_super) {
    tslib_1.__extends(TimeoutDecorator, _super);
    function TimeoutDecorator() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.log = log4js_1.getLogger(TimeoutDecorator.name);
        return _this;
    }
    TimeoutDecorator.prototype.run = function (options) {
        var _this = this;
        this.log.debug('Starting timeout timer (%s ms) for a test run', options.timeout);
        var runTask = new Task_1.default(options.timeout, function () { return _this.handleTimeout(); });
        runTask.chainTo(_super.prototype.run.call(this, options));
        return runTask.promise;
    };
    TimeoutDecorator.prototype.dispose = function () {
        var _this = this;
        return this.proxy(function () { return _super.prototype.dispose.call(_this); }, MAX_WAIT_FOR_DISPOSE);
    };
    TimeoutDecorator.prototype.proxy = function (action, timeoutMs) {
        if (action) {
            var maybePromise = action();
            if (objectUtils_1.isPromise(maybePromise)) {
                var task = new Task_1.default(timeoutMs);
                task.chainTo(maybePromise);
                return task.promise;
            }
        }
        return Promise.resolve();
    };
    TimeoutDecorator.prototype.handleTimeout = function () {
        var _this = this;
        return this.dispose()
            .then(function () { return _this.createInnerRunner(); })
            .then(function () { return _this.init(); })
            .then(function () { return ({ status: test_runner_1.RunStatus.Timeout, tests: [] }); });
    };
    return TimeoutDecorator;
}(TestRunnerDecorator_1.default));
exports.default = TimeoutDecorator;
//# sourceMappingURL=TimeoutDecorator.js.map