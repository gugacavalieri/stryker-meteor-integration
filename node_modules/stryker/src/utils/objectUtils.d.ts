/// <reference types="node" />
export { serialize, deserialize } from 'surrial';
export declare function freezeRecursively<T extends {
    [prop: string]: any;
}>(target: T): T;
export declare function isPromise(input: any): input is Promise<any>;
export declare function filterEmpty<T>(input: (T | null | void)[]): T[];
export declare function isErrnoException(error: Error): error is NodeJS.ErrnoException;
export declare function errorToString(error: any): any;
export declare function copy<T>(obj: T, deep?: boolean): T;
export declare function wrapInClosure(codeFragment: string): string;
/**
 * A wrapper around `process.env` (for testability)
 */
export declare function getEnvironmentVariable(nameEnvironmentVariable: string): string | undefined;
/**
 * A wrapper around `process.exitCode = n` (for testability)
 */
export declare function setExitCode(n: number): void;
export declare function base64Decode(base64EncodedString: string): string;
/**
 * Consolidates multiple consecutive white spaces into a single space.
 * @param str The string to be normalized
 */
export declare function normalizeWhiteSpaces(str: string): string;
export declare function kill(pid: number): Promise<void>;
