/**
 * Wraps a promise in a Task api for convenience.
 */
export default class Task<T = void> {
    private timeoutHandler?;
    private _promise;
    private resolveFn;
    private rejectFn;
    private _isResolved;
    private timeout;
    constructor(timeoutMs?: number, timeoutHandler?: (() => PromiseLike<T>) | undefined);
    readonly isResolved: boolean;
    readonly promise: Promise<T>;
    handleTimeout(): void;
    chainTo(promise: Promise<T>): void;
    resolve(result: undefined | T | PromiseLike<T>): void;
    reject(reason: any): void;
    private resolveTimeout;
}
