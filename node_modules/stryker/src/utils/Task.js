"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Wraps a promise in a Task api for convenience.
 */
var Task = /** @class */ (function () {
    function Task(timeoutMs, timeoutHandler) {
        var _this = this;
        this.timeoutHandler = timeoutHandler;
        this._isResolved = false;
        this._promise = new Promise(function (resolve, reject) {
            _this.resolveFn = resolve;
            _this.rejectFn = reject;
        });
        if (timeoutMs) {
            this.timeout = setTimeout(function () { return _this.handleTimeout(); }, timeoutMs);
        }
    }
    Object.defineProperty(Task.prototype, "isResolved", {
        get: function () {
            return this._isResolved;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Task.prototype, "promise", {
        get: function () {
            return this._promise;
        },
        enumerable: true,
        configurable: true
    });
    Task.prototype.handleTimeout = function () {
        var _this = this;
        if (this.timeoutHandler) {
            this.timeoutHandler().then(function (val) { return _this.resolve(val); });
        }
        else {
            this.resolve(undefined);
        }
    };
    Task.prototype.chainTo = function (promise) {
        var _this = this;
        promise.then(function (value) { return _this.resolve(value); }, function (reason) { return _this.reject(reason); });
    };
    Task.prototype.resolve = function (result) {
        this.resolveTimeout();
        this.resolveFn(result);
    };
    Task.prototype.reject = function (reason) {
        this.resolveTimeout();
        this.rejectFn(reason);
    };
    Task.prototype.resolveTimeout = function () {
        if (this.timeout) {
            clearTimeout(this.timeout);
        }
        this._isResolved = true;
    };
    return Task;
}());
exports.default = Task;
//# sourceMappingURL=Task.js.map