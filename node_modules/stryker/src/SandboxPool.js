"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var log4js_1 = require("log4js");
var os = require("os");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var Sandbox_1 = require("./Sandbox");
var SandboxPool = /** @class */ (function () {
    function SandboxPool(options, testFramework, initialFiles, overheadTimeMS) {
        this.options = options;
        this.testFramework = testFramework;
        this.initialFiles = initialFiles;
        this.overheadTimeMS = overheadTimeMS;
        this.log = log4js_1.getLogger(SandboxPool.name);
        this.sandboxes = [];
    }
    SandboxPool.prototype.streamSandboxes = function () {
        var _this = this;
        var numConcurrentRunners = os.cpus().length;
        if (this.options.transpilers.length) {
            // If transpilers are configured, one core is reserved for the compiler (for now)
            numConcurrentRunners--;
        }
        var numConcurrentRunnersSource = 'CPU count';
        if (numConcurrentRunners > this.options.maxConcurrentTestRunners && this.options.maxConcurrentTestRunners > 0) {
            numConcurrentRunners = this.options.maxConcurrentTestRunners;
            numConcurrentRunnersSource = 'maxConcurrentTestRunners config';
        }
        if (numConcurrentRunners <= 0) {
            numConcurrentRunners = 1;
        }
        this.log.info("Creating " + numConcurrentRunners + " test runners (based on " + numConcurrentRunnersSource + ")");
        var sandboxes = rxjs_1.range(0, numConcurrentRunners)
            .pipe(operators_1.flatMap(function (n) { return _this.registerSandbox(Sandbox_1.default.create(_this.options, n, _this.initialFiles, _this.testFramework, _this.overheadTimeMS)); }));
        return sandboxes;
    };
    SandboxPool.prototype.registerSandbox = function (promisedSandbox) {
        this.sandboxes.push(promisedSandbox);
        return promisedSandbox;
    };
    SandboxPool.prototype.disposeAll = function () {
        return Promise.all(this.sandboxes.map(function (promisedSandbox) { return promisedSandbox.then(function (sandbox) { return sandbox.dispose(); }); }));
    };
    return SandboxPool;
}());
exports.default = SandboxPool;
//# sourceMappingURL=SandboxPool.js.map