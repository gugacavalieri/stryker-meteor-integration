"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var os = require("os");
var ProgressKeeper_1 = require("./ProgressKeeper");
var Timer_1 = require("../utils/Timer");
var ProgressAppendOnlyReporter = /** @class */ (function (_super) {
    tslib_1.__extends(ProgressAppendOnlyReporter, _super);
    function ProgressAppendOnlyReporter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ProgressAppendOnlyReporter.prototype.onAllMutantsMatchedWithTests = function (matchedMutants) {
        var _this = this;
        _super.prototype.onAllMutantsMatchedWithTests.call(this, matchedMutants);
        if (matchedMutants.length) {
            this.timer = new Timer_1.default();
            this.intervalReference = setInterval(function () { return _this.render(); }, 10000);
        }
    };
    ProgressAppendOnlyReporter.prototype.onAllMutantsTested = function () {
        clearInterval(this.intervalReference);
    };
    ProgressAppendOnlyReporter.prototype.render = function () {
        process.stdout.write("Mutation testing " + this.percent() + " (ETC " + this.etc() + ") " +
            (this.progress.tested + "/" + this.progress.total + " tested (" + this.progress.survived + " survived)") +
            os.EOL);
    };
    ProgressAppendOnlyReporter.prototype.percent = function () {
        return Math.floor(this.progress.tested / this.progress.total * 100) + '%';
    };
    ProgressAppendOnlyReporter.prototype.etc = function () {
        var etcSeconds = Math.floor(this.timer.elapsedSeconds() / this.progress.tested * (this.progress.total - this.progress.tested));
        if (isFinite(etcSeconds)) {
            return etcSeconds + 's';
        }
        else {
            return 'n/a';
        }
    };
    return ProgressAppendOnlyReporter;
}(ProgressKeeper_1.default));
exports.default = ProgressAppendOnlyReporter;
//# sourceMappingURL=ProgressAppendOnlyReporter.js.map