"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var log4js_1 = require("log4js");
var objectUtils_1 = require("../utils/objectUtils");
var BroadcastReporter = /** @class */ (function () {
    function BroadcastReporter(reporters) {
        this.reporters = reporters;
        this.log = log4js_1.getLogger(BroadcastReporter.name);
    }
    BroadcastReporter.prototype.broadcast = function (methodName, eventArgs) {
        var _this = this;
        if (eventArgs === void 0) { eventArgs = undefined; }
        var allPromises = [];
        this.reporters.forEach(function (namedReporter) {
            if (typeof namedReporter.reporter[methodName] === 'function') {
                try {
                    var maybePromise = namedReporter.reporter[methodName](eventArgs);
                    if (objectUtils_1.isPromise(maybePromise)) {
                        allPromises.push(maybePromise.catch(function (error) {
                            _this.handleError(error, methodName, namedReporter.name);
                        }));
                    }
                }
                catch (error) {
                    _this.handleError(error, methodName, namedReporter.name);
                }
            }
        });
        if (allPromises.length) {
            return Promise.all(allPromises);
        }
    };
    BroadcastReporter.prototype.onSourceFileRead = function (file) {
        this.broadcast('onSourceFileRead', file);
    };
    BroadcastReporter.prototype.onAllSourceFilesRead = function (files) {
        this.broadcast('onAllSourceFilesRead', files);
    };
    BroadcastReporter.prototype.onAllMutantsMatchedWithTests = function (results) {
        this.broadcast('onAllMutantsMatchedWithTests', results);
    };
    BroadcastReporter.prototype.onMutantTested = function (result) {
        this.broadcast('onMutantTested', result);
    };
    BroadcastReporter.prototype.onAllMutantsTested = function (results) {
        this.broadcast('onAllMutantsTested', results);
    };
    BroadcastReporter.prototype.onScoreCalculated = function (score) {
        this.broadcast('onScoreCalculated', score);
    };
    BroadcastReporter.prototype.wrapUp = function () {
        return this.broadcast('wrapUp');
    };
    BroadcastReporter.prototype.handleError = function (error, methodName, reporterName) {
        this.log.error("An error occurred during '" + methodName + "' on reporter '" + reporterName + "'. Error is: " + error);
    };
    return BroadcastReporter;
}());
exports.default = BroadcastReporter;
//# sourceMappingURL=BroadcastReporter.js.map