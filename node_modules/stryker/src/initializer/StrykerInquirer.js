"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var inquirer = require("inquirer");
var StrykerInquirer = /** @class */ (function () {
    function StrykerInquirer() {
    }
    StrykerInquirer.prototype.promptTestRunners = function (options) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var answers;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, inquirer.prompt({
                            type: 'list',
                            name: 'testRunner',
                            message: 'Which test runner do you want to use?',
                            choices: options.map(function (_) { return _.name; }),
                            default: 'Mocha'
                        })];
                    case 1:
                        answers = _a.sent();
                        return [2 /*return*/, options.filter(function (_) { return _.name === answers['testRunner']; })[0] || { name: 'mocha', npm: 'stryker-mocha-runner' }];
                }
            });
        });
    };
    StrykerInquirer.prototype.promptTestFrameworks = function (options) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var answers;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, inquirer.prompt({
                            type: 'list',
                            name: 'testFramework',
                            message: 'Which test framework do you want to use?',
                            choices: options.map(function (_) { return _.name; }),
                        })];
                    case 1:
                        answers = _a.sent();
                        return [2 /*return*/, options.filter(function (_) { return _.name === answers['testFramework']; })[0]];
                }
            });
        });
    };
    StrykerInquirer.prototype.promptMutator = function (options) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var answers;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, inquirer.prompt({
                            type: 'list',
                            name: 'mutator',
                            message: 'What kind of code do you want to mutate?',
                            choices: options.map(function (_) { return _.name; })
                        })];
                    case 1:
                        answers = _a.sent();
                        return [2 /*return*/, options.filter(function (_) { return _.name === answers['mutator']; })[0]];
                }
            });
        });
    };
    StrykerInquirer.prototype.promptTranspilers = function (options) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var answers;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, inquirer.prompt({
                            type: 'checkbox',
                            name: 'transpilers',
                            message: '[optional] What kind transformations should be applied to your code?',
                            choices: options.map(function (_) { return _.name; })
                        })];
                    case 1:
                        answers = _a.sent();
                        return [2 /*return*/, options.filter(function (option) { return answers['transpilers'].some(function (transpilerName) { return option.name === transpilerName; }); })];
                }
            });
        });
    };
    StrykerInquirer.prototype.promptReporters = function (options) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var answers;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, inquirer.prompt({
                            type: 'checkbox',
                            name: 'reporters',
                            message: 'Which reporter(s) do you want to use?',
                            choices: options.map(function (_) { return _.name; }),
                            default: ['clear-text', 'progress']
                        })];
                    case 1:
                        answers = _a.sent();
                        return [2 /*return*/, options.filter(function (option) { return answers['reporters'].some(function (reporterName) { return option.name === reporterName; }); })];
                }
            });
        });
    };
    return StrykerInquirer;
}());
exports.StrykerInquirer = StrykerInquirer;
//# sourceMappingURL=StrykerInquirer.js.map