"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var fs = require("fs");
var log4js_1 = require("log4js");
var MochaRunnerOptions_1 = require("./MochaRunnerOptions");
var MochaOptionsLoader = /** @class */ (function () {
    function MochaOptionsLoader() {
        this.log = log4js_1.getLogger(MochaOptionsLoader.name);
    }
    MochaOptionsLoader.prototype.load = function (config) {
        var mochaOptions = Object.assign({}, config[MochaRunnerOptions_1.mochaOptionsKey]);
        if (mochaOptions && mochaOptions.opts) {
            var optsFileName = path.resolve(mochaOptions.opts);
            this.log.info("Loading mochaOpts from \"" + optsFileName + "\"");
            var options = fs.readFileSync(optsFileName, 'utf8');
            return Object.assign(this.parseOptsFile(options), mochaOptions);
        }
        else {
            this.log.debug('No mocha opts file specified, not loading additional mocha options (%s.opts was not defined).', MochaRunnerOptions_1.mochaOptionsKey);
            return mochaOptions;
        }
    };
    MochaOptionsLoader.prototype.parseOptsFile = function (optsFileContent) {
        var _this = this;
        var options = optsFileContent.split('\n').map(function (val) { return val.trim(); });
        var mochaRunnerOptions = Object.create(null);
        options.forEach(function (option) {
            var _a;
            var args = option.split(' ').filter(Boolean);
            if (args[0]) {
                switch (args[0]) {
                    case '--require':
                    case '-r':
                        args.shift();
                        if (!mochaRunnerOptions.require) {
                            mochaRunnerOptions.require = [];
                        }
                        (_a = mochaRunnerOptions.require).push.apply(_a, args);
                        break;
                    case '--timeout':
                    case '-t':
                        mochaRunnerOptions.timeout = _this.parseNextInt(args);
                        break;
                    case '--async-only':
                    case '-A':
                        mochaRunnerOptions.asyncOnly = true;
                        break;
                    case '--ui':
                    case '-u':
                        mochaRunnerOptions.ui = _this.parseNextString(args);
                        break;
                    default:
                        _this.log.debug("Ignoring option \"" + args[0] + "\" as it is not supported.");
                        break;
                }
            }
        });
        return mochaRunnerOptions;
    };
    MochaOptionsLoader.prototype.parseNextInt = function (args) {
        if (args.length > 1) {
            return Number.parseInt(args[1]);
        }
        else {
            return undefined;
        }
    };
    MochaOptionsLoader.prototype.parseNextString = function (args) {
        if (args.length > 1) {
            return args[1];
        }
        else {
            return undefined;
        }
    };
    return MochaOptionsLoader;
}());
exports.default = MochaOptionsLoader;
//# sourceMappingURL=MochaOptionsLoader.js.map