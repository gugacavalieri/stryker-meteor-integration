"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var path = require("path");
var keys_1 = require("./helpers/keys");
var log4js_1 = require("log4js");
var BabelConfigReader = /** @class */ (function () {
    function BabelConfigReader() {
        this.log = log4js_1.getLogger(BabelConfigReader.name);
    }
    BabelConfigReader.prototype.readConfig = function (config) {
        log4js_1.setGlobalLogLevel(config.logLevel);
        var babelConfig = config[keys_1.CONFIG_KEY_OPTIONS] || this.getConfigFile(config) || {};
        this.log.debug("babel config is: " + JSON.stringify(babelConfig, null, 2));
        return babelConfig;
    };
    BabelConfigReader.prototype.getConfigFile = function (config) {
        if (typeof config[keys_1.CONFIG_KEY_FILE] === 'string') {
            var babelrcPath = path.resolve(config[keys_1.CONFIG_KEY_FILE]);
            this.log.info("Reading .babelrc file from path \"" + babelrcPath + "\"");
            if (fs.existsSync(babelrcPath)) {
                try {
                    var config_1 = JSON.parse(fs.readFileSync(babelrcPath, 'utf8'));
                    return config_1;
                }
                catch (error) {
                    this.log.error("Error while reading .babelrc file: " + error);
                }
            }
            else {
                this.log.error("babelrc file does not exist at: " + babelrcPath);
            }
        }
        else {
            this.log.info("No .babelrc file configured. Please set the \"" + keys_1.CONFIG_KEY_FILE + "\" property in your config.");
        }
        return null;
    };
    return BabelConfigReader;
}());
exports.default = BabelConfigReader;
//# sourceMappingURL=BabelConfigReader.js.map