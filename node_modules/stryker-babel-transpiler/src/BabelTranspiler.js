"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("stryker-api/core");
var babel = require("babel-core");
var path = require("path");
var BabelConfigReader_1 = require("./BabelConfigReader");
var keys_1 = require("./helpers/keys");
var helpers_1 = require("./helpers/helpers");
var log4js_1 = require("log4js");
var KNOWN_EXTENSIONS = Object.freeze([
    '.es6',
    '.js',
    '.es',
    '.jsx'
    // => TODO in Babel 7 this list gets even bigger (and is exported from @babel/core: https://github.com/babel/babel/blob/master/packages/babel-core/src/index.js#L41)
    // Also: you can add custom extensions if your using the babel cli, maybe we should also support that use case
]);
var BabelTranspiler = /** @class */ (function () {
    function BabelTranspiler(options) {
        log4js_1.setGlobalLogLevel(options.config.logLevel);
        this.babelOptions = new BabelConfigReader_1.default().readConfig(options.config);
        this.projectRoot = this.determineProjectRoot(options);
        if (options.produceSourceMaps) {
            throw new Error("Invalid `coverageAnalysis` \"" + options.config.coverageAnalysis + "\" is not supported by the stryker-babel-transpiler. Not able to produce source maps yet. Please set it to \"off\".");
        }
    }
    BabelTranspiler.prototype.transpile = function (files) {
        var _this = this;
        return new Promise(function (res) { return res(files.map(function (file) { return _this.transpileFileIfNeeded(file); })); });
    };
    BabelTranspiler.prototype.transpileFileIfNeeded = function (file) {
        if (KNOWN_EXTENSIONS.some(function (ext) { return ext === path.extname(file.name); })) {
            try {
                return this.transpileFile(file);
            }
            catch (error) {
                throw new Error("Error while transpiling \"" + file.name + "\": " + (error.stack || error.message));
            }
        }
        else {
            return file; // pass through
        }
    };
    BabelTranspiler.prototype.transpileFile = function (file) {
        var options = Object.assign({}, this.babelOptions, {
            filename: file.name,
            filenameRelative: path.relative(this.projectRoot, file.name)
        });
        var result = babel.transform(file.textContent, options);
        if (result.ignored) {
            // Ignored will be true if the file was not transpiled (because it was ignored)
            // TODO: Babel 7 will change this (according to a conversation I had on Slack).
            //  => it will return a `null` value in that case
            return file;
        }
        else if (typeof result.code === 'undefined') {
            throw new Error("Could not transpile file \"" + file.name + "\". Babel transform function delivered `undefined`.");
        }
        else {
            return new core_1.File(helpers_1.toJSFileName(file.name), result.code);
        }
    };
    BabelTranspiler.prototype.determineProjectRoot = function (options) {
        var configFile = options.config[keys_1.CONFIG_KEY_FILE];
        if (configFile) {
            return path.dirname(configFile);
        }
        else {
            return process.cwd();
        }
    };
    return BabelTranspiler;
}());
exports.default = BabelTranspiler;
//# sourceMappingURL=BabelTranspiler.js.map