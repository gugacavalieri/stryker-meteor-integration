"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("mz/fs");
var path = require("path");
var mkdirp = require("mkdirp");
var rimraf = require("rimraf");
function copyFolderOrFile(fromPath, toPath) {
    return fs.stat(fromPath).then(function (stats) {
        if (stats.isDirectory()) {
            return copyFolder(fromPath, toPath);
        }
        else {
            return copyFile(fromPath, toPath);
        }
    });
}
function copyFolder(fromPath, to) {
    return mkdir(to)
        .then(function () { return fs.readdir(fromPath); })
        .then(function (files) { return Promise.all(files.map(function (file) { return copyFolderOrFile(path.join(fromPath, file), path.join(to, file)); })); })
        .then(function (_) { return void 0; });
}
exports.copyFolder = copyFolder;
function copyFile(fromFilename, toFilename) {
    return new Promise(function (resolve, reject) {
        var readStream = fs.createReadStream(fromFilename);
        var writeStream = fs.createWriteStream(toFilename);
        readStream.on('error', reject);
        writeStream.on('error', reject);
        readStream.pipe(writeStream);
        readStream.on('end', function () { return resolve(); });
    });
}
function deleteDir(dirToDelete) {
    return new Promise(function (res, rej) {
        rimraf(dirToDelete, function (err) {
            if (err) {
                rej(err);
            }
            else {
                res();
            }
        });
    });
}
exports.deleteDir = deleteDir;
function mkdir(folderName) {
    return new Promise(function (res, rej) {
        mkdirp(folderName, function (err) {
            if (err) {
                rej(err);
            }
            else {
                res();
            }
        });
    });
}
exports.mkdir = mkdir;
function writeFile(fileName, content) {
    return mkdir(path.dirname(fileName))
        .then(function (_) { return fs.writeFile(fileName, content, 'utf8'); });
}
exports.writeFile = writeFile;
function countPathSep(fileName) {
    var count = 0;
    for (var _i = 0, fileName_1 = fileName; _i < fileName_1.length; _i++) {
        var ch = fileName_1[_i];
        if (ch === path.sep) {
            count++;
        }
    }
    return count;
}
exports.countPathSep = countPathSep;
//# sourceMappingURL=util.js.map